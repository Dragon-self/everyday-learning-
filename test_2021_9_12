#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//void bubble_sort(int arr[], int sz)
//{
//	int count = 0;
//	do
//	{
//		count = 0;
//		int i = 0;
//		for (i = 0; i < sz - 1; i++)
//		{
//			if (arr[i] > arr[i + 1])
//			{
//				int tmp = arr[i];
//				arr[i] = arr[i + 1];
//				arr[i+1] = tmp;
//				count++;
//			}
//		}
//		sz--;
//	} while (count != 0);
//}

int cmp_int(const void* e1, const void* e2)
{
	//比较两个整形值的函数
	return *(int*)e1 - *(int*)e2;
}
//void* 类型的指针，可以接收任意类型的地址，但是无类型，不能加减整数运算
void test1()
{
	int arr[10] = { 9,8,7,6,5,4,3,2,1,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	qsort(arr, sz, sizeof(arr[0]), cmp_int);//bubble_sort
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
}


int cmp_float(const void* e1, const void* e2)
{
	/*if (*(float*)e1 > *(float*)e2)
		return 1;
	else if (*(float*)e1 == *(float*)e2)
		return 0;
	else
		return -1;*/
	return ((int)(*(float*)e1 - *(float*)e2));
}
void test2()
{
	float f[] = { 9.0,8.0,7.0,5.0,6.0 };
	int sz = sizeof(f) / sizeof(f[0]);
	bubble_sort(f, sz, sizeof(f[0]), cmp_float);//qcort
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%f ", f[i]);
	}
}



struct Stu
{
	char name[20];
	int age;
};
int cmp_stu_by_age(const void* e1, const void* e2)
{
	return ((struct Stu*)e1)->age - ((struct Stu*)e2)->age;
}
int cmp_stu_by_name(const void* e1, const void* e2)
{
	//比较名字是比较字符串
	//字符串比较不能用<>=来比较，应该用strcmp函数
	return strcmp(((struct Stu*)e1)->name, ((struct Stu*)e2)->name);
}
void test3()
{
	struct Stu s[3] = { {"张三",20},{"李四",30},{"王五",10} };
	int sz = sizeof(s) / sizeof(s[0]);
	bubble_sort(s, sz, sizeof(s[0]), cmp_stu_by_name);//qsort
	//第一个参数：待排序数组的首元素地址
	//第二个参数：待排序数组的元素个数
	//第三个参数：待排序数组的每个元素的大小 - 单位字节
	//第四个参数：函数指针，比较两个元素的所用函数的地址 - 这个函数使用者自己实现
	//函数指针的两个参数：待比较的两个元素的地址
}


int bubble_sort(void* base, int sz, int width, int(*p)(const void*, const void*))
{
	int count = 0;
	do
	{
		count = 0;
		int i = 0;
		for (i = 0; i < sz - 1; i++)
		{
			if (p((char*)base + i * width, (char*)base + (i + 1) * width) > 0)//两个元素比较大小
			{
				int j = 0;
				for (j = 0; j < width; j++)
				{
					int tmp = *((char*)base + j + i * width);
					*((char*)base + j + i * width) = *((char*)base + j + (i + 1) * width);
					*((char*)base + j + (i + 1) * width) = tmp;
				}
				count++;
			}
		}
		sz--;
	} while (count != 0);
}


void test4()
{
	int arr[10] = { 9,8,7,6,5,4,3,2,1,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	//使用bubble_sort的程序员一定知道自己排序的是什么数据
	//就应该知道如何比较待排序数组中的元素
	bubble_sort(arr,sz,sizeof(arr[0]),cmp_int);//qsort
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
}
int main()
{
	test1();
	printf("\n");
	test2();
	printf("\n");
	test3();
	printf("\n");
	test4();
	return 0;
}
