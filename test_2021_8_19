#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

//int main()
//{
//	int arr[10] = { 0 };
//	char ch[] = "bit";
//	printf("%p\n", arr);//地址--首元素地址
//	printf("%p\n", &arr[0]);
////数组名代表数组首元素的地址，但是有两个例外
////1.sizeof(数组名)--数组名表示整个数组，sizeof(数组名)计算的是整个数组的大小，单位是字节
////2.&数组名--数组名表示整个数组，&数组名，取出的是整个数组的地址,数值上与首元素地址相同，但是意义不同
//	printf("%s\n", ch);
////打印字符型数组，打印的是所有数组元素
//	return 0;
//}

//int main()
//{
//	int arr[10] = { 0 };
//	int* p = arr;
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		*(p + i) = i;
//	}
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ",arr[i]);
//		printf("%d ", *(p + i));
//	}
//	/*for (i = 0; i < 10; i++)
//	{
//		printf("%p ===== %p\n", p + i, &arr[i]);
//	}*/
//	return 0;
//
//}

//int main()
//{
//	int a = 10;
//	int* pa = &a;//pa就是一级指针
//	int** ppa = &pa;//ppa就是二级指针
//	**ppa = 20;
//	printf("%d\n", **ppa);
//	return 0;
//}


//指针数组--数组--存放指针的数组
//数组指针--指针--数组的地址

int main()
{
	int a = 10;
	int b = 20;
	int c = 30;
	int* pa = &a;
	int* pb = &b;
	int* pc = &c;
	//整形数组-存放整形
	//字符数组-存放字符
	//指针数组-存放指针
	int arr[10];
	int* arr2[3] = {&a,&b,&c};
	int i = 0;
	for (i = 0; i < 3; i++)
	{
		printf("%d\n", * (arr2[i]));
	}
}
