#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

//int main()
//{
//	int a = 10;
//	int i = 0;
//	int arr[11] = { 1,2,3,4,5,6,7,8,9,10,11};
//	for (i = 0; i <= 13; i++)
//	{
//		arr[i] = 0;
//		printf("hehe\n");
//	}
//	return 0;
//}

//void my_strcpy(char* dest, char* src)
//{
//	while(*src!='\0')
//	{
//		*dest = *src;
//		src++;
//		dest++;
//	}
//	*dest = *src;
//}

//void my_strcpy(char* dest, char* src)
//{
//	while (*dest++ = *src++)
//	{
//		;
//	}
//}
//#include <assert.h>
//char* my_strcpy(char* dest,const char* src)
//{
//	char* ret = dest;
//	assert(dest != NULL);
//	assert(src != NULL);
//	//把src指向的字符串拷贝到dest指向的空间，包含'\0'字符
//	while (*dest++ = *src++)
//	{
//		;
//	}
//	return ret;
//}
//
//int main()
//{
//	char arr1[] = "#####################";
//	char arr2[] = "bit";
//	printf("%s\n", my_strcpy(arr1, arr2));
//	return 0;
//}

//int main()
//{
//	const int num = 10;
//	const int* p = &num;
//	int* const p = &num;
//	//const 放在指针变量的*左边时，修饰的是*p，也就是说，不能通过p来改变*p(num)的值
//	//const 放在指针变量的*右边时，修饰的时指针变量p本身，p不能被改变了
//	return 0;
//}
#include <assert.h>
int my_strlen(const char* str)
{
	int count = 0;
	assert(str != NULL);//保证指针有效性
	while (*str != '\0')
	{
		count++;
		str++;
	}
	return count;
}

int main()
{
	char arr[] = "abcdef";
	int len = my_strlen(arr);
	printf("%d\n", len);
	return 0;
}
