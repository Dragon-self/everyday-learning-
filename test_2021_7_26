#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


//void bubble_sort(int* Iarr[],int sz)
//{
//	int tmp = 0;
//	int i = 0;
//	for (i = 0; i < sz - 1; i++)
//	{
//		int flag = 1;//假设这一趟要排序的数据已经有序
//		//每趟冒泡排序
//		int j = 0;
//		for (j = 0;j < sz - i -1; j++)
//		{
//			if (Iarr[j] > Iarr[j + 1])
//			{
//				tmp = Iarr[j];
//				Iarr[j] = Iarr[j+1];
//				Iarr[j+1] = tmp;
//				flag = 0;//本趟排序的数据其实不完全有序
//			}
//		}
//		if (flag == 1)
//		{
//			break;
//		}
//	}
//}
//
//
//int main()
//{
//	int i = 0;
//	int arr[] = { 1,9,4,5,7 };
//	//对arr进行排序，进行升序
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	bubble_sort(arr,sz);//冒泡排序函数
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}

//int main()
//{
//	int arr[] = { 1,2,3,4 };
//	printf("%p\n", arr);
//	printf("%p\n", arr+1);
//
//	printf("%p\n", &arr[0]);
//	printf("%p\n", &arr[0]+1);
//
//	printf("%p\n", &arr);
//	printf("%p\n", &arr+1);
//
//
//
//	char arr1[] = "hello";
//	printf("%p\n", &arr1[0]);
//	printf("%p\n", &arr1[0]+1);
//
//	printf("%p\n", arr1);
//	printf("%p\n", arr1 + 1);
//
//	printf("%p\n", &arr1);
//	printf("%p\n", &arr1 + 1);
//
//
//
//	printf("%d", *arr);
//	return 0;
//}
//数组名代表数组首元素的地址，但是有两个例外
//1.sizeof(数组名)--数组名表示整个数组，sizeof(数组名)计算的是整个数组的大小，单位是字节
//2.&数组名--数组名表示整个数组，&数组名，取出的是整个数组的地址,数值上与首元素地址相同，但是意义不同
